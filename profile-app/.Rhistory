length(roi.train.ts)
length(lag7)
lag7<-c(rep(NA,7),lag(roi.train.ts$IMPACT_077,7))
lag7<-c(rep(NA,7),lag(roi.train.ts,7))
length(lag7)
lag7<-c(lag(roi.train.ts,7))
ts.model<-auto.arima(roi.train.ts,
xreg=c(lag7))
ts.model
tsdiag(ts.model)
?auto.arima
ts.model<-auto.arima(roi.train.ts,
xreg=data.frame(lag7=lag7)
)
ts.model
roi<-roi1[roi1$ROI_PERIOD_SEGMENT == "EVENING PEAK" &
roi1$CHANNEL_COD == "CH4" &
roi1$TX_DATE < "2014-07-01"
,]
roi.train<-subset(roi,TX_DATE < '2014-04-01')
roi.test<-subset(roi,TX_DATE >= '2014-04-01')
roi.train.ts<-ts(roi.train$IMPACT_077,frequency=7)
tsoutliers(roi.train.ts)
roi.train.ts.clean<-tsclean(roi.train.ts)
plot(roi.train.ts,col="red")
lines(roi.train.ts.clean)
tsdisplay(roi.train.ts.clean)
lag7<-lag(roi.train.ts,7)
lag7<-lag(roi.train$IMPACT_077,7)
length(roi.train.ts.clean)
length(lag7)
lag7
roi<-roi1[roi1$ROI_PERIOD_SEGMENT == "EVENING PEAK" &
roi1$CHANNEL_COD == "CH4" &
roi1$TX_DATE < "2014-07-01"
,]
roi.train<-subset(roi,TX_DATE < '2014-04-01')
roi.test<-subset(roi,TX_DATE >= '2014-04-01')
roi.train.ts<-ts(roi.train$IMPACT_077,frequency=7)
tsoutliers(roi.train.ts)
roi.train.ts.clean<-tsclean(roi.train.ts)
plot(roi.train.ts,col="red")
lines(roi.train.ts.clean)
tsdisplay(roi.train.ts.clean)
ts.model<-auto.arima(roi.train.ts.clean)
ts.model
tsdiag(ts.model)
fcast.ts<-forecast(ts.model, h=nrow(roi.test))
plot(fcast.ts)
lines(ts(c(roi.train$IMPACT_077,roi.test$IMPACT_077),frequency=7))
ts.diff<-roi.test$IMPACT_077-fcast.ts$mean
plot(ts.diff)
roi.train.ts<-ts(roi.train$IMPACT_077,frequency=365)
tsoutliers(roi.train.ts)
roi.train.ts.clean<-tsclean(roi.train.ts)
plot(roi.train.ts,col="red")
lines(roi.train.ts.clean)
tsdisplay(roi.train.ts.clean)
lag7<-lag(roi.train$IMPACT_077,7)
ts.model<-auto.arima(roi.train.ts.clean,
xreg=data.frame(lag7=c(rep(NA,7),lag7[,:length(roi.train.ts.clean)]))
)
ts.model<-auto.arima(roi.train.ts.clean,
xreg=data.frame(lag7=c(rep(NA,7),lag7[,:length(roi.train.ts.clean)]))
)
ts.model<-auto.arima(roi.train.ts.clean,
xreg=data.frame(lag7=c(rep(NA,7),lag7[,1:length(roi.train.ts.clean)]))
)
lag7
ts.model<-auto.arima(roi.train.ts.clean,
xreg=data.frame(lag7=lag7))
)
ts.model<-auto.arima(roi.train.ts.clean,
xreg=data.frame(lag7=lag7)
)
ts.model
tsdiag(ts.model)
fcast.ts<-forecast(ts.model, h=nrow(roi.test))
lag7<-lag(roi.train.ts.clean$IMPACT_077,7)
lag7<-lag(roi.train.ts.clean,7)
ts.model<-auto.arima(roi.train.ts.clean,
xreg=data.frame(lag7=lag7)
)
ts.model
lag7<-lag(roi.train$IMPACT_077,7)
ts.model<-auto.arima(roi.train.ts.clean,
xreg=data.frame(lag7=lag7)
)
ts.model
tsdiag(ts.model)
fcast.ts<-forecast(ts.model, h=nrow(roi.test))
lag7.test<-lag(roi.test$IMPACT_077,7)
roi.test
roi<-roi1[roi1$ROI_PERIOD_SEGMENT == "EVENING PEAK" &
roi1$CHANNEL_COD == "CH4" &
roi1$TX_DATE < "2014-07-01"
,]
roi.train<-subset(roi,TX_DATE < '2014-04-01')
roi.test<-subset(roi,TX_DATE >= '2014-04-01')
roi.train.ts<-ts(roi.train$IMPACT_077,frequency=7)
tsoutliers(roi.train.ts)
roi.train.ts.clean<-tsclean(roi.train.ts)
plot(roi.train.ts,col="red")
lines(roi.train.ts.clean)
tsdisplay(roi.train.ts.clean)
ts.model<-auto.arima(roi.train.ts.clean)
ts.model
tsdiag(ts.model)
fcast.ts<-forecast(ts.model, h=nrow(roi.test))
plot(fcast.ts)
lines(ts(c(roi.train$IMPACT_077,roi.test$IMPACT_077),frequency=7))
ts.diff<-roi.test$IMPACT_077-fcast.ts$mean
plot(ts.diff)
##Prelim checks on the data
source("I:/201406/Linear Forecasting Project/04 Modelling/Sprint 1/useful_functions.R")
#install.packages("ggplot2")
#install.packages("reshape2")
#install.packages("gridExtra")
#install.packages("forecast")
#install.packages("data.table")
library(ggplot2)
library(reshape2)
library(gridExtra)
library(forecast)
library(MASS)
library(data.table)
load(file="I:/201406/Linear Forecasting Project/02 Data/Sprint 1/Preliminary testing/roi_data_with_date.RData")
roi<-roi1[roi1$ROI_PERIOD_SEGMENT == "EVENING PEAK" & roi1$CHANNEL_COD == "CH4",]
##Calculate Share
roi$SHARE_77<-roi$IMPACT_077/(roi$TOTALTV_77*10^-3)
roi$P_SHARE_77<-roi$P_IMPACT_077/(roi$P_TOTALTV_77*10^-3)
ggplot(roi,aes(TX_DATE,SHARE_77))+geom_line()
roi.1314<-roi[roi$YEAR %in% c(2013,2014),]
ggplot(roi.1314,aes(TX_DATE,SHARE_77))+geom_line()
ts.roi<-ts(roi.1314$IMPACT_077,frequency=7)
ts.roi.decompose<-decompose(ts.roi)
plot(ts.roi.decompose)
acf(ts.roi.decompose$random,na.action=na.pass)
lag=c(rep(NA,1),lag(roi.1314$IMPACT_077,1))
roi.lagged.data<-data.frame(
cbind(
IMPACT_077=roi.1314$IMPACT_077,
lag1=lag[-((length(lag)-(1-1)):length(lag))]
)
)
for (i in 2:30) {
eval(
parse(
text=paste0(
"lag=c(rep(NA,",i,"),lag(roi.1314$IMPACT_077,",i,"))"
)
)
)
eval(
parse(
text=paste0(
"roi.lagged.data<-data.frame(cbind(roi.lagged.data,lag",
i,
"=lag[-((length(lag)-(",
i,
"-1)):length(lag))]))"
)
)
)
}
lin.reg<-lm(IMPACT_077~.,roi.lagged.data)
acf(lin.reg$residuals)
##Stepwise to pull out main features
step <- stepAIC(lin.reg, direction="both",trace=0)
acf(step$residuals)
summary(step)
roi<-roi1[roi1$ROI_PERIOD_SEGMENT == "EVENING PEAK" &
roi1$CHANNEL_COD == "CH4" &
roi1$TX_DATE < "2014-07-01"
,]
roi.train<-subset(roi,TX_DATE < '2014-04-01')
roi.test<-subset(roi,TX_DATE >= '2014-04-01')
roi.train.ts<-ts(roi.train$IMPACT_077,frequency=7)
tsoutliers(roi.train.ts)
roi.train.ts.clean<-tsclean(roi.train.ts)
plot(roi.train.ts,col="red")
lines(roi.train.ts.clean)
tsdisplay(roi.train.ts.clean)
ts.model<-auto.arima(roi.train.ts.clean)
ts.model
tsdiag(ts.model)
fcast.ts<-forecast(ts.model, h=nrow(roi.test))
plot(fcast.ts)
lines(ts(c(roi.train$IMPACT_077,roi.test$IMPACT_077),frequency=7))
ts.diff<-roi.test$IMPACT_077-fcast.ts$mean
plot(ts.diff)
roi.train.ts<-ts(roi.train$IMPACT_077,frequency=365)
tsoutliers(roi.train.ts)
roi.train.ts.clean<-tsclean(roi.train.ts)
plot(roi.train.ts,col="red")
lines(roi.train.ts.clean)
tsdisplay(roi.train.ts.clean)
lag7.train<-lag(roi.train$IMPACT_077,7)
ts.model<-auto.arima(roi.train.ts.clean,
xreg=data.frame(lag7=lag7.train)
)
ts.model
tsdiag(ts.model)
lag7.test<-lag(roi.test$IMPACT_077,7)
fcast.ts<-forecast(ts.model,
h=nrow(roi.test),
xreg=data.frame(lag7=lag7.test)
)
plot(fcast.ts)
lines(ts(c(roi.train$IMPACT_077,roi.test$IMPACT_077),frequency=365))
ts.diff<-roi.test$IMPACT_077-fcast.ts$mean
plot(ts.diff)
ts.pdiff<-(roi.test$IMPACT_077-fcast.ts$mean)/roi.test$IMPACT_077
plot(ts.pdiff)
plot(roi.train.ts,col="red",main="Outlier estiamtion acrossthe time series (Outlier in Red)")
lines(roi.train.ts.clean)
roi.train.ts<-ts(roi.train$IMPACT_077,frequency=7)
tsoutliers(roi.train.ts)
roi.train.ts.clean<-tsclean(roi.train.ts)
plot(roi.train.ts,col="red",main="Outlier estiamtion acrossthe time series (Outlier in Red)")
lines(roi.train.ts.clean)
tsdisplay(roi.train.ts.clean)
ts.model<-auto.arima(roi.train.ts.clean)
ts.model
tsdiag(ts.model)
fcast.ts<-forecast(ts.model, h=nrow(roi.test))
plot(fcast.ts)
lines(ts(c(roi.train$IMPACT_077,roi.test$IMPACT_077),frequency=7))
ts.diff<-roi.test$IMPACT_077-fcast.ts$mean
plot(ts.diff)
ts.pdiff<-(roi.test$IMPACT_077-fcast.ts$mean)/roi.test$IMPACT_077
plot(ts.pdiff)
roi.train.ts<-ts(roi.train$IMPACT_077,frequency=365)
tsoutliers(roi.train.ts)
roi.train.ts.clean<-tsclean(roi.train.ts)
tsdisplay(roi.train.ts.clean)
lag7.train<-lag(roi.train$IMPACT_077,7)
ts.model<-auto.arima(roi.train.ts.clean,
xreg=data.frame(lag7=lag7.train)
)
ts.model
tsdiag(ts.model)
roi.train.ts<-ts(roi.train$IMPACT_077,frequency=365)
tsoutliers(roi.train.ts)
roi.train.ts.clean<-tsclean(roi.train.ts)
plot(roi.train.ts,col="red")
lines(roi.train.ts.clean)
lag7.train<-lag(roi.train.ts.clean$IMPACT_077,7)
roi.lag7<-lag(roi$IMPACT_077,7)
roi.train<-subset(roi.lag7,roi$TX_DATE < '2014-04-01')
roi.test<-subset(roi.lag7,roi$TX_DATE >= '2014-04-01')
roi.lag7
roi.train
roi.test
lag7.train<-subset(roi.lag7,roi$TX_DATE < '2014-04-01')
lag7.test<-subset(roi.lag7,roi$TX_DATE >= '2014-04-01')
ts.model<-auto.arima(roi.train.ts.clean,
xreg=data.frame(lag7=lag7.train)
)
ts.model
plot(roi$IMPACT_077)
lines(roi.lag7)
roi.lag7<-c(rep(NA,7),roi$IMPACT_077[1:(length(roi$IMPACT_077)-7)])
lag7.train<-subset(roi.lag7,roi$TX_DATE < '2014-04-01')
lag7.test<-subset(roi.lag7,roi$TX_DATE >= '2014-04-01')
plot(roi$IMPACT_077)
lines(roi.lag7)
ts.model<-auto.arima(roi.train.ts.clean,
xreg=data.frame(lag7=lag7.train)
)
ts.model
tsdiag(ts.model)
fcast.ts<-forecast(ts.model,
h=nrow(roi.test),
xreg=data.frame(lag7=lag7.test)
)
plot(fcast.ts)
lines(ts(c(roi.train$IMPACT_077,roi.test$IMPACT_077),frequency=365))
roi.train$IMPACT_077
roi.train<-subset(roi,TX_DATE < '2014-04-01')
roi.test<-subset(roi,TX_DATE >= '2014-04-01')
fcast.ts<-forecast(ts.model,
h=nrow(roi.test),
xreg=data.frame(lag7=lag7.test)
)
plot(fcast.ts)
lines(ts(c(roi.train$IMPACT_077,roi.test$IMPACT_077),frequency=365))
ts.diff<-roi.test$IMPACT_077-fcast.ts$mean
plot(ts.diff)
ts.pdiff<-(roi.test$IMPACT_077-fcast.ts$mean)/roi.test$IMPACT_077
plot(ts.pdiff)
plot(roi$IMPACT_077[1:50],type="l")
lines(roi.lag7[1:50],col="red")
ts.model<-auto.arima(roi.train.ts.clean,
xreg=data.frame(lag7=lag7.train)
)
ts.model
tsdiag(ts.model)
library(reshape2)
library(ggplot2)
#install.packages("pander")
library(pander)
dat1<-read.csv(
"I:/201406/Linear Forecasting Project/02 Data/Sprint 2/program_level_impacts.csv"
)
dat1$ROI_RULE_ID_LAB<-factor(dat1$ROI_RULE_ID,
levels=c(1,2,3,4,5),
labels=c("Average","Same Series","Like","Brand","Genre"))
dat1$TX_DATE<-as.Date(dat1$TX_DATE,format='%d/%m/%Y')
dim(dat1)
length(
unique(
paste0(
dat1$START_DATE_TIME,
dat1$AUDIENCE_CATEGORY_ID,
dat1$CHANNEL_NAM,
dat1$TITLE
)
)
)==nrow(dat1)
colnames(dat1)
?read.table
dat1<-read.delim("I:/201406/Linear Forecasting Project/04 Modelling/Sprint 3/2012_share_comments.txt", header = TRUE, sep = "\t")
head(dat1)
dat1
colnames(dat1)<-c("date","share","comment")
dat1$date<-as.Date(dat1$date)
head(dat1)
?as>Date
?as.Date
dat1<-read.delim("I:/201406/Linear Forecasting Project/04 Modelling/Sprint 3/2012_share_comments.txt", header = TRUE, sep = "\t")
head(dat1)
colnames(dat1)<-c("date","share","comment")
dat1$date<-as.Date(dat1$date, "%d/%m/%Y")
head(dat1)
dat1<-dat1[dat1$date >= '2012-01-01' & dat1$date < '2013-01-01' ,]
library(jsonlite)
toJSON(dat1)
##Sundries to run
source("I:/201406/Linear Forecasting Project/04 Modelling/Sprint 1/useful_functions.R")
#install.packages("ggplot2")
#install.packages("reshape2")
#install.packages("gridExtra")
library(ggplot2)
library(reshape2)
library(gridExtra)
library(forecast)
##Load in data
load(
file="I:/201406/Linear Forecasting Project/02 Data/Sprint 1/Preliminary testing/roi_data_with_date.RData"
)
roi<-roi1
roi$TX_DATE<- as.Date(roi$TX_DATE)
##Subset data into Evening Peak, C4 up to Jun14.
peak.data<-roi[roi$ROI_PERIOD_SEGMENT == "EVENING PEAK" &
roi$CHANNEL_COD == "CH4" &
roi$TX_DATE < '2014-06-30'
,
c("TX_DATE","DAY","TOTALTV_77","IMPACT_077","WEEK_NUM","DAY")
]
##summary(peak.data)
##Calculate Share for each day
peak.data$SHARE_77<-peak.data$IMPACT_077*1000/peak.data$TOTALTV_77
#head(peak.data)
##Lets take Share as a Time series and set the weekly frequency - We will force this in so it can be picked up.
ts<-ts(peak.data$SHARE_77,frequency=7)
##There are a few outlier from the olympics/paralympics - We know what these are so lets take them out for now.
#tsoutliers(ts)
ts<-tsclean(ts)
ts.dec<-decompose(ts)
##Compose the dataframe for the seasonal graph
temp1<-data.frame(DAY=peak.data$DAY[1:21],SEASONAL=ts.dec$seasonal[1:21])
##Peak Share graph - This includes the extreme points from paralympics
ggplot(peak.data)+
geom_line(aes(TX_DATE,SHARE_77))+
ggtitle("Peak Share for Audience 77")
##Seasonality component graph - again includes paralympics
ggplot(temp1)+geom_line(aes(x=c(1:21),y=SEASONAL[1:21]))+
scale_x_discrete(labels=peak.data$DAY[1:21])+
ggtitle("Weekly seasonality component calculated for Peak share audience 77")
##Have a look at the trend component more closely - Lets look at it on a weekly basis!
ts.trend <- data.frame(trend=ts.dec$trend+ts.dec$random,weeknum=format(peak.data$TX_DATE, "%Y-%U"))
for (j in 1:nrow(ts.trend)) {
ts.trend$weektrend[j]<-mean(ts.trend$trend[ts.trend$weeknum == ts.trend$weeknum[j]],na.rm=TRUE)
}
ggplot(ts.trend)+geom_line(aes(x=1:nrow(ts.trend),y=weektrend))+
scale_x_discrete(labels=ts.trend$weeknum)+
ggtitle("Average Weekly trend calculated for Peak share audience 77")
ts.trend2<-aggregate(ts.dec$trend+ts.dec$random ~ format(peak.data$TX_DATE, "%Y-%U"),FUN=mean)
##Lets plot the breakdown so we can understand each layer - Extreme points taken out
plot(ts.dec)
#Calculate confidence interval
share.summary<-summary(peak.data$SHARE_77)
share.ci<-as.vector(share.summary[c(2,5)])
dat1.com<-read.delim("I:/201406/Linear Forecasting Project/04 Modelling/Sprint 3/2012_share_comments.txt", header = TRUE, sep = "\t")
colnames(dat1.com)<-c("date","share","comment")
dat1.com$date<-as.Date(dat1.com$date, "%d/%m/%Y")
dat1.com<-dat1[dat1.com$date >= '2012-01-01' & dat1.com$date < '2013-01-01' ,]
dat1.com<-dat1.com[dat1.com$date >= '2012-01-01' & dat1.com$date < '2013-01-01' ,]
head(dat1.com)
head(peak.data)
dat1.com$share<-dat1.com$share/100
dat1.com<-read.delim("I:/201406/Linear Forecasting Project/04 Modelling/Sprint 3/2012_share_comments.txt", header = TRUE, sep = "\t")
colnames(dat1.com)<-c("date","share","comment")
dat1.com$date<-as.Date(dat1.com$date, "%d/%m/%Y")
dat1.com<-dat1.com[dat1.com$date >= '2012-01-01' & dat1.com$date < '2013-01-01' ,]
head(dat1.com)
head(peak.data)
peak.data<-merge(peak.data,dat1.com,by.x="TX_DATE",by.y="date")
head(peak.data)
peak.data<-peak.data[,c("TX_DATE","DAY","SHARE_77","comment")]
data.to.json <-list()
for (i in unique(peak.data$DAY)) {
data.temp<-peak.data[format(peak.data$TX_DATE,"%Y") == 2012 & peak.data$DAY == i,c("TX_DATE","SHARE_77","comment")]
colnames(data.temp)<-c("date","share","comment")
eval(parse(text=paste0("data.to.json$",i," <-data.temp")))
}
data.json.2012<-toJSON(data.to.json)
data.json.2012
%.%
?%.%
"defsf" %.% "ggggg"
install.packages("dplyr")
library(devtools)
install_github('rstudio/shinyapps')
library(shiny)
library(reshape2)
runApp("~/Documents/R/Cluster profiling/profile-app-techy")
install.packages("shiny")
library(shiny)
library(reshape2)
runApp("~/Documents/R/Cluster profiling/profile-app-techy")
runApp("P:/R repositories/simple-shiny-app/Cluster profiling/profile-app")
runApp("P:/R repositories/simple-shiny-app/Cluster profiling/profile-app")
runApp("P:/R repositories/simple-shiny-app/Cluster profiling/profile-app")
runApp("P:/R repositories/simple-shiny-app/Cluster profiling/profile-app")
runApp("P:/R repositories/simple-shiny-app/Cluster profiling/profile-app")
runApp("P:/R repositories/simple-shiny-app/Cluster profiling/profile-app")
runApp("I:\\201404\\Mine4\\02 Data\\Sprint3\\Cluster profiling\\profile-app-techy")
runApp("P:\R repositories\simple-shiny-app\\profile-app")
runApp("P:/R repositories/simple-shiny-app/profile-app")
data(cars)
cars
head(esoph)
sum(esoph$ncases)
sum(esoph$ncontrols)
?rep
data(Titanic)
head(Titanic)
str(Titanic)
runApp("P:/R repositories/simple-shiny-app/profile-app")
runApp("P:/R repositories/simple-shiny-app/profile-app")
runApp("P:/R repositories/simple-shiny-app/profile-app")
runApp("P:/R repositories/simple-shiny-app/profile-app")
library(shinyapps)
shinyapps::setAccountInfo(
name="apatterson",
token="7108EFE36993BA17D47C7AE9630F15A5",
secret="YNaoPbk8YMKKTwLhcL7Az0j0GRWml8vVsGsctGNn")
runApp("P:/R repositories/simple-shiny-app/profile-app")
deployApp("P:/R repositories/simple-shiny-app/profile-app")
install.packages("devtools")
install.packages("devtools")
require(devtools)
install_github('rCharts','ramnathv')
install_github('rstudio/shinyapps')
install.packages("shiny")
install.packages("ggplot2")
install.packages("reshape2")
library(shinyapps)
shinyapps::setAccountInfo(
name="apatterson",
token="7108EFE36993BA17D47C7AE9630F15A5",
secret="YNaoPbk8YMKKTwLhcL7Az0j0GRWml8vVsGsctGNn")
deployApp("P:/R repositories/simple-shiny-app/profile-app")
runApp("P:/R repositories/simple-shiny-app/profile-app")
library(shiny)
runApp("P:/R repositories/simple-shiny-app/profile-app")
runApp("P:/R repositories/simple-shiny-app/profile-app")
shinyapps::setAccountInfo(
name="apatterson",
token="7108EFE36993BA17D47C7AE9630F15A5",
secret="YNaoPbk8YMKKTwLhcL7Az0j0GRWml8vVsGsctGNn")
deployApp("P:/R repositories/simple-shiny-app/profile-app")
shiny::runApp('P:/R repositories/simple-shiny-app/profile-app')
deployApp("P:/R repositories/simple-shiny-app/profile-app")
runApp("P:/R repositories/simple-shiny-app/profile-app")
deployApp("P:/R repositories/simple-shiny-app/profile-app")
deployApp("P:/R repositories/simple-shiny-app/profile-app")
deployApp("P:/R repositories/simple-shiny-app/profile-app")
deployApp("P:/R repositories/simple-shiny-app/profile-app")
devtools::install_github('rstudio/rscrypt')
library(rscrypt)
library(scrypt)
addAuthorizedUser("dinnerwithdata")
deployApp()
runApp()
removeAuthorizedUser("dinnerwithdata")
deployApp()
terminateApp("profile-app-techy")
setwd("P:\R repositories\simple-shiny-app\profile-app")
setwd("P:/R repositories/simple-shiny-app/profile-app")
library(shinyapps)
shinyapps::setAccountInfo(name='apatterson',
token='7108EFE36993BA17D47C7AE9630F15A5',
secret='YNaoPbk8YMKKTwLhcL7Az0j0GRWml8vVsGsctGNn'
)
library(shiny)
runApp()
library(scrypt)
addAuthorizedUser("dinnerwithdata")
deployApp()
